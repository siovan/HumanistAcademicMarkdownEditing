# [PackageDev] target_format: plist, ext: tmLanguage
name: AcademicMarkdown
scopeName: text.html.markdown.academicmarkdown
uuid: a4707381-4d89-4565-91d5-9ca845c2bc42

patterns:
- include: '#block_line'

- include: '#citekeys'

- include: '#critic-addition'

- include: '#critic-substitution'

- include: '#critic-highlight'

- include: '#critic-deletion'

- include: '#critic-comment'

- include: '#footnote_inline'

- include: '#footnote_mark'

- include: '#quote_inline'

- name: meta.header.multimarkdown
  begin: ^([A-Za-z0-9]+)(:)\s*
  beginCaptures:
    '1': {name: keyword.other.multimarkdown}
    '2': {name: punctuation.separator.key-value.multimarkdown}
  end: ^$|^(?=[A-Za-z0-9]+:)
  patterns:
  - comment: "The reason for not setting scopeName = \"string.unquoted\" \n\t\t\t\t\
      \t\t(for the parent rule) is that we do not want\n\t\t\t\t\t\tnewlines to be\
      \ marked as string.unquoted"
    name: string.unquoted.multimarkdown
    match: .+

- comment: "\n\t\t\t\tWe could also use an empty end match and set\n\t\t\t\tapplyEndPatternLast,\
    \ but then we must be sure that the begin\n\t\t\t\tpattern will only match stuff\
    \ matched by the sub-patterns.\n\t\t\t"
  name: meta.block-level.markdown
  begin: "(?x)^\n(?=\t[ ]{,3}>\n|\t([ ]{4}|\\t)(?!$)\n|\t[#]{1,6}\\s*+\n|\t[ ]{,3}(?<marker>[-*_])([\
    \ ]{,2}\\k<marker>){2,}[ \\t]*+$\n)"
  end: "(?x)^\n(?!\t[ ]{,3}>\n|\t([ ]{4}|\\t)\n|\t[#]{1,6}\\s*+\n|\t[ ]{,3}(?<marker>[-*_])([\
    \ ]{,2}\\k<marker>){2,}[ \\t]*+$\n)"
  patterns:
  - include: '#block_line'
  - include: '#block_quote'
  - include: '#block_raw'
  - include: '#heading'
  - include: '#separator'

- name: markup.list.unnumbered.markdown
  begin: ^[ ]{0,3}([*+-])(?=\s)
  end: ^(?=\S)
  captures:
    '1': {name: meta.doctype}
  patterns:
  - include: '#fenced-code-blocks'
  - include: '#list-paragraph'

- name: markup.list.numbered.markdown
  begin: ^[ ]{0,3}([0-9]+)(\.)(?=\s)
  end: ^(?=\S)
  captures:
    '1': {name: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown}
    '2': {name: punctuation.definition.list_item.markdown}
  patterns:
  - include: '#fenced-code-blocks'
  - include: '#list-paragraph'

- include: '#fenced-code-blocks'

- comment: "\n\t\t\t\tMarkdown formatting is disabled inside block-level tags.\n\t\
    \t\t"
  name: meta.disable-markdown
  begin: ^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)(?!.*?</\1>)
  end: (?<=^</\1>$\n)
  patterns:
  - include: '#tag-kbd'
  - include: text.html.basic

- comment: Same rule but for one line disables.
  name: meta.disable-markdown
  begin: ^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)
  end: $\n?
  patterns:
  - include: '#tag-kbd'
  - include: text.html.basic

- name: meta.link.reference.def.markdown
  match: "(?x:\n\t\t\t\t\\s*\t\t\t\t\t\t# Leading whitespace\n\t\t\t\t(\\[)(.+?)(\\\
    ])(:)\t\t# Reference name\n\t\t\t\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\t\t\
    \t\t(<?)(\\S+?)(>?)\t\t\t# The url\n\t\t\t\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\
    \t\t\t\t(?:\n\t\t\t\t\t  ((\\().+?(\\)))\t\t# Match title in quotes\u2026\n\t\t\
    \t\t\t| ((\").+?(\"))\t\t# or in parens.\n\t\t\t\t)?\t\t\t\t\t\t# Title is optional\n\
    \t\t\t\t[ \\t]*\t\t\t\t\t\t# Optional whitespace\n\t\t\t\t$\n\t\t\t)"
  captures:
    '1': {name: punctuation.definition.constant.markdown}
    '2': {name: constant.other.reference.link.markdown}
    '3': {name: punctuation.definition.constant.markdown}
    '4': {name: punctuation.separator.key-value.markdown}
    '5': {name: punctuation.definition.link.markdown}
    '6': {name: markup.underline.link.markdown}
    '7': {name: punctuation.definition.link.markdown}
    '8': {name: string.other.link.description.title.markdown}
    '9': {name: punctuation.definition.string.begin.markdown}
    '10': {name: punctuation.definition.string.end.markdown}
    '11': {name: string.other.link.description.title.markdown}
    '12': {name: punctuation.definition.string.begin.markdown}
    '13': {name: punctuation.definition.string.end.markdown}

- name: meta.paragraph.markdown
  begin: ^(?=\S)(?![=-]{3,}(?=$))
  end: ^(?:\s*$|(?=[ ]{,3}>)|(?=```|~~~))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[
    \t]*\n|(?=^#)
  patterns:
  - include: '#inline'
  - include: text.html.basic
  - name: meta.tag
    match: ^(={3,})(?=[ \t]*$)
    captures:
      '1': {name: punctuation.definition.heading.markdown}
  - name: meta.tag
    match: ^(-{3,})(?=[ \t]*$)
    captures:
      '1': {name: punctuation.definition.heading.markdown}

repository:
  ampersand:
    comment: "\n\t\t\t\tMarkdown will convert this for us. We match it so that the\n\
      \t\t\t\tHTML grammar will not mark it up as invalid.\n\t\t\t"
    name: meta.other.valid-ampersand.markdown
    match: '&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)'

  block_line:
    name: support
    match: ^\|.*$ 

  block_quote:
    comment: "\n\t\t\t\tWe terminate the block quote when seeing an empty line, a\n\
      \t\t\t\tseparator or a line with leading > characters. The latter is\n\t\t\t\
      \tto \u201Creset\u201D the quote level for quoted lines.\n\t\t\t"
    name: comment
    begin: \G[ ]{,3}(>)[ ]?
    beginCaptures:
      '1': {name: punctuation.definition.blockquote.markdown}
    end: "(?x)^\n(?=\t\\s*$\n|\t[ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\\
      t]*+$\n|\t[ ]{,3}>\n)"
    patterns:
    - begin: "(?x)\\G\n(?=\t[ ]{,3}>\n)"
      end: ^
      patterns:
      - include: '#block_quote'
    - begin: "(?x)\\G\n(?=\t([ ]{4}|\\t)\n|\t[#]{1,6}\\s*+\n|\t[ ]{,3}(?<marker>[-*_])([\
        \ ]{,2}\\k<marker>){2,}[ \\t]*+$\n)"
      end: ^
      patterns:
      - include: '#block_raw'
      - include: '#heading'
      - include: '#separator'
      applyEndPatternLast: 1
    - begin: "(?x)\\G\n(?!\t$\n|\t[ ]{,3}>\n|\t([ ]{4}|\\t)\n|\t[#]{1,6}\\s*+\n|\t\
        [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n)"
      end: $|(?<=\n)
      patterns:
      - include: '#inline'
      - include: text.html.basic

  block_raw:
    name: markup.raw.block.markdown
    match: \G([ ]{4}|\t).*$\n?

  bold:
    name: meta.tag
    begin: "(?x)\n(?<!\\w)(\\*\\*|__)(?=\\S)\t\t\t\t\t\t\t\t# Open\n(?=\n\t(\n\t \
      \   <[^>]*+>\t\t\t\t\t\t\t# HTML tags\n\t  | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\\
      k<raw>\n\t\t\t\t\t\t\t\t\t\t\t# Raw\n\t  | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+\t\
      \t\t# Escapes\n\t  | \\[\n\t\t(\n\t\t        (?<square>\t\t\t\t\t# Named group\n\
      \t\t\t\t\t[^\\[\\]\\\\]\t\t\t\t# Match most chars\n\t\t          | \\\\.\t\t\
      \t\t\t\t# Escaped chars\n\t\t          | \\[ \\g<square>*+ \\]\t\t# Nested brackets\n\
      \t\t        )*+\n\t\t\t\\]\n\t\t\t(\n\t\t\t\t(\t\t\t\t\t\t\t# Reference Link\n\
      \t\t\t\t\t[ ]?\t\t\t\t\t# Optional space\n\t\t\t\t\t\\[[^\\]]*+\\]\t\t\t\t#\
      \ Ref name\n\t\t\t\t)\n\t\t\t  | (\t\t\t\t\t\t\t# Inline Link\n\t\t\t\t\t\\\
      (\t\t\t\t\t\t# Opening paren\n\t\t\t\t\t\t[ \\t]*+\t\t\t\t# Optional whtiespace\n\
      \t\t\t\t\t\t<?(.*?)>?\t\t\t# URL\n\t\t\t\t\t\t[ \\t]*+\t\t\t\t# Optional whtiespace\n\
      \t\t\t\t\t\t(\t\t\t\t\t# Optional Title\n\t\t\t\t\t\t\t(?<title>['\"])\n\t\t\
      \t\t\t\t\t(.*?)\n\t\t\t\t\t\t\t\\k<title>\n\t\t\t\t\t\t)?\n\t\t\t\t\t\\)\n\t\
      \t\t\t)\n\t\t\t)\n\t\t)\n\t  | (?!(?<=\\S)\\1).\t\t\t\t\t\t# Everything besides\n\
      \t\t\t\t\t\t\t\t\t\t\t# style closer\n\t)++\n\t(?<=\\S)\\1\t\t\t\t\t\t\t\t#\
      \ Close\n)"
    end: (?<=\S)(\1)
    captures:
      '1': {name: punctuation.definition.bold.markdown}
    patterns:
    - begin: (?=<[^>]*?>)
      end: (?<=>)
      patterns:
      - include: '#tag-kbd'
      - include: text.html.basic
      applyEndPatternLast: 1
    - include: '#escape'
    - include: '#ampersand'
    - include: '#bracket'
    - include: '#raw'
    - include: '#italic'
    - include: '#strikethrough'
    - include: '#image-inline'
    - include: '#link-inline'
    - include: '#link-inet'
    - include: '#link-email'
    - include: '#image-ref'
    - include: '#link-ref-literal'
    - include: '#link-ref'

  bracket:
    comment: "\n\t\t\t\tMarkdown will convert this for us. We match it so that the\n\
      \t\t\t\tHTML grammar will not mark it up as invalid.\n\t\t\t"
    name: meta.other.valid-bracket.markdown
    match: <(?![a-z/?\$!])

  citekeys:
    comment: This should highlight citekeys and @refs
    name: string.other.link.description.title.markdown
    match: '@[\w:-]+'

  critic-addition:
    comment: Editorial Addition
    name: criticmarkup.addition
    match: \{\+\+(.*?)\+\+[ \t]*(\[(.*?)\])?[ \t]*\}

  critic-comment:
    comment: Editorial Mark
    name: criticmarkup.comment
    begin: \{>>
    end: <<\}

  critic-deletion:
    comment: Editorial Deletion
    name: criticmarkup.deletion
    match: \{\-\-(.*?)\-\-[ \t]*(\[(.*?)\])?[ \t]*\}

  critic-highlight:
    name: criticmarkup.highlight
    match: \{==(.*?)[ \t]*(\[(.*?)\])?[ \t]*==\}
    highlight: Editorial Highlight

  critic-substitution:
    comment: Editorial Substitution
    name: criticmarkup.substitution
    match: \{\~\~(.*?)\~\~\}

  escape:
    name: constant.character.escape.markdown
    match: \\[-`*_#+.!(){}\[\]\\>]

  fenced-c:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(c)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.c
  fenced-c++:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(c\+\+|cpp)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.c++

  fenced-code-blocks:
    patterns:
    - include: '#fenced-html'
    - include: '#fenced-xml'
    - include: '#fenced-diff'
    - include: '#fenced-perl'
    - include: '#fenced-php'
    - include: '#fenced-css'
    - include: '#fenced-less'
    - include: '#fenced-java'
    - include: '#fenced-c'
    - include: '#fenced-c++'
    - include: '#fenced-yaml'
    - include: '#fenced-sql'
    - include: '#fenced-shell'
    - include: '#fenced-sass'
    - include: '#fenced-scala'
    - include: '#fenced-obj-c'
    - include: '#fenced-coffee'
    - include: '#fenced-js'
    - include: '#fenced-ruby'
    - include: '#fenced-python'
    - include: '#fenced-undefined'

  fenced-coffee:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(coffee)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.coffee

  fenced-css:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(css)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.css

  fenced-diff:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(diff)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.diff

  fenced-html:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(html|html5)\s*$
    end: ^(\1)\n
    patterns:
    - include: text.html.basic

  fenced-java:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(java)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.java

  fenced-js:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(js|json|javascript)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.js

  fenced-less:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(less)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.css.less

  fenced-obj-c:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(objective-c)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.objc

  fenced-perl:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(perl)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.perl

  fenced-php:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(php)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.php

  fenced-python:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(py|python)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.python

  fenced-ruby:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(ruby)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.ruby

  fenced-sass:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(sass|scss)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.sass

  fenced-scala:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(scala)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.scala

  fenced-shell:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(sh|shell)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.shell

  fenced-sql:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(sql)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.sql

  fenced-undefined:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*(`{3,}|~{3,}))(.*?)\s*$
    end: ^(\1)\n

  fenced-xml:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(xml)\s*$
    end: ^(\1)\n
    patterns:
    - include: text.xml

  fenced-yaml:
    name: markup.raw.block.markdown markup.raw.block.fenced.markdown
    begin: ^(\s*[`~]{3,})(yaml)\s*$
    end: ^(\1)\n
    patterns:
    - include: source.yaml

  footnote_inline:
    comment: Inline footnotes
    name: variable.parameter
    begin: \^\[
    end: \][ ]|$
    patterns:
    - include: '#inline'

  footnote_mark:
    comment: style markers for pullout footnotes
    name: support.function

  heading:
    name: meta.tag
    contentName: string
    begin: \G(#{1,6})(?!#)\s*(?=\S)
    end: \s*(#*)$\n?
    captures:
      '1': {name: punctuation.definition.heading.markdown}
    patterns:
    - include: '#inline'

  image-inline:
    name: meta.image.inline.markdown
    match: "(?x:\n\t\t\t\t\\!\t\t\t\t\t\t\t# Images start with !\n\t\t\t\t(\\[)((?<square>[^\\\
      [\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n\t\t\t\t\t\t\t\t\t\t\t# Match\
      \ the link text.\n\t\t\t\t([ ])?\t\t\t\t\t\t# Space not allowed\n\t\t\t\t(\\\
      ()\t\t\t\t\t\t# Opening paren for url\n\t\t\t\t\t(<?)(\\S+?)(>?)\t\t\t# The\
      \ url\n\t\t\t\t\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\t\t\t\t\t(?:\n\t\t\
      \t\t\t\t  ((\\().+?(\\)))\t\t# Match title in parens\u2026\n\t\t\t\t\t\t| ((\"\
      ).+?(\"))\t\t# or in quotes.\n\t\t\t\t\t)?\t\t\t\t\t\t# Title is optional\n\t\
      \t\t\t\t\\s*\t\t\t\t\t\t# Optional whitespace\n\t\t\t\t(\\))\n\t\t\t )"
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.description.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: invalid.illegal.whitespace.markdown}
      '6': {name: punctuation.definition.metadata.markdown}
      '7': {name: punctuation.definition.link.markdown}
      '8': {name: markup.underline.link.image.markdown}
      '9': {name: punctuation.definition.link.markdown}
      '10': {name: string.other.link.description.title.markdown}
      '11': {name: punctuation.definition.string.markdown}
      '12': {name: punctuation.definition.string.markdown}
      '13': {name: string.other.link.description.title.markdown}
      '14': {name: punctuation.definition.string.markdown}
      '15': {name: punctuation.definition.string.markdown}
      '16': {name: punctuation.definition.metadata.markdown}

  image-ref:
    name: meta.image.reference.markdown
    match: \!(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.description.markdown}
      '4': {name: punctuation.definition.string.begin.markdown}
      '5': {name: punctuation.definition.constant.markdown}
      '6': {name: constant.other.reference.link.markdown}
      '7': {name: punctuation.definition.constant.markdown}

  inline:
    patterns:
    - include: '#critic-addition'
    - include: '#critic-substitution'
    - include: '#critic-highlight'
    - include: '#critic-deletion'
    - include: '#critic-comment'
    - include: '#citekeys'
    - include: '#escape'
    - include: '#footnote_inline'
    - include: '#ampersand'
    - include: '#bracket'
    - include: '#raw'
    - include: '#bold'
    - include: '#italic'
    - include: '#strikethrough'
    - include: '#line-break'
    - include: '#image-inline'
    - include: '#link-inline'
    - include: '#link-inet'
    - include: '#link-email'
    - include: '#image-ref'
    - include: '#quote_inline'
    - include: '#link-ref-literal'
    - include: '#link-ref'
    - include: '#tag-kbd'

  italic:
    name: constant.character
    begin: "(?x)\n(?<!\\w)(\\*|_)(?=\\S)\t\t\t\t\t\t\t\t# Open\n(?=\n\t(\n\t    <[^>]*+>\t\
      \t\t\t\t\t\t# HTML tags\n\t  | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\\
      k<raw>\n\t\t\t\t\t\t\t\t\t\t\t# Raw\n\t  | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+\t\
      \t\t# Escapes\n\t  | \\[\n\t\t(\n\t\t        (?<square>\t\t\t\t\t# Named group\n\
      \t\t\t\t\t[^\\[\\]\\\\]\t\t\t\t# Match most chars\n\t\t          | \\\\.\t\t\
      \t\t\t\t# Escaped chars\n\t\t          | \\[ \\g<square>*+ \\]\t\t# Nested brackets\n\
      \t\t        )*+\n\t\t\t\\]\n\t\t\t(\n\t\t\t\t(\t\t\t\t\t\t\t# Reference Link\n\
      \t\t\t\t\t[ ]?\t\t\t\t\t# Optional space\n\t\t\t\t\t\\[[^\\]]*+\\]\t\t\t\t#\
      \ Ref name\n\t\t\t\t)\n\t\t\t  | (\t\t\t\t\t\t\t# Inline Link\n\t\t\t\t\t\\\
      (\t\t\t\t\t\t# Opening paren\n\t\t\t\t\t\t[ \\t]*+\t\t\t\t# Optional whtiespace\n\
      \t\t\t\t\t\t<?(.*?)>?\t\t\t# URL\n\t\t\t\t\t\t[ \\t]*+\t\t\t\t# Optional whtiespace\n\
      \t\t\t\t\t\t(\t\t\t\t\t# Optional Title\n\t\t\t\t\t\t\t(?<title>['\"])\n\t\t\
      \t\t\t\t\t(.*?)\n\t\t\t\t\t\t\t\\k<title>\n\t\t\t\t\t\t)?\n\t\t\t\t\t\\)\n\t\
      \t\t\t)\n\t\t\t)\n\t\t)\n\t  | \\1\\1\t\t\t\t\t\t\t\t# Must be bold closer\n\
      \t  | (?!(?<=\\S)\\1).\t\t\t\t\t\t# Everything besides\n\t\t\t\t\t\t\t\t\t\t\
      \t# style closer\n\t)++\n\t(?<=\\S)\\1\t\t\t\t\t\t\t\t# Close\n)"
    end: (?<=\S)(\1)((?!\1)|(?=\1\1))
    captures:
      '1': {name: punctuation.definition.italic.markdown}
    patterns:
    - begin: (?=<[^>]*?>)
      end: (?<=>)
      patterns:
      - include: '#tag-kbd'
      - include: text.html.basic
      applyEndPatternLast: 1
    - include: '#escape'
    - include: '#ampersand'
    - include: '#bracket'
    - include: '#raw'
    - include: '#bold'
    - include: '#strikethrough'
    - include: '#image-inline'
    - include: '#link-inline'
    - include: '#link-inet'
    - include: '#link-email'
    - include: '#image-ref'
    - include: '#link-ref-literal'
    - include: '#link-ref'

  line-break:
    name: meta.dummy.line-break
    match: ' {2,}$'

  link-email:
    name: meta.link.email.lt-gt.markdown
    match: (<)?((?:mailto:)?[-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(>)?
    captures:
      '1': {name: punctuation.definition.link.markdown}
      '2': {name: markup.underline.link.markdown}
      '4': {name: punctuation.definition.link.markdown}

  link-inet:
    name: meta.link.inet.markdown
    match: (<)?(\b(?:https?|ftp|file|git):///?[^\s()<>\[\]]+)(>)?
    captures:
      '1': {name: punctuation.definition.link.markdown}
      '2': {name: markup.underline.link.markdown}
      '3': {name: punctuation.definition.link.markdown}

  link-inline:
    name: meta.link.inline.markdown
    match: "(?x:\n\t\t\t\t(\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\\
      ])\n\t\t\t\t\t\t\t\t\t\t\t# Match the link text.\n\t\t\t\t([ ])?\t\t\t\t\t\t\
      # Space not allowed\n\t\t\t\t(\\()\t\t\t\t\t\t# Opening paren for url\n\t\t\t\
      \t\t(<?)(.*?)(>?)\t\t\t# The url\n\t\t\t\t\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\
      \t\t\t\t\t(?:\n\t\t\t\t\t\t  ((\\().+?(\\)))\t\t# Match title in parens\u2026\
      \n\t\t\t\t\t\t| ((\").+?(\"))\t\t# or in quotes.\n\t\t\t\t\t)?\t\t\t\t\t\t#\
      \ Title is optional\n\t\t\t\t\t\\s*\t\t\t\t\t\t# Optional whitespace\n\t\t\t\
      \t(\\))\n\t\t\t )"
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.title.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: invalid.illegal.whitespace.markdown}
      '6': {name: punctuation.definition.metadata.markdown}
      '7': {name: punctuation.definition.link.markdown}
      '8': {name: markup.underline.link.markdown}
      '9': {name: punctuation.definition.link.markdown}
      '10': {name: string.other.link.description.title.markdown}
      '11': {name: punctuation.definition.string.begin.markdown}
      '12': {name: punctuation.definition.string.end.markdown}
      '13': {name: string.other.link.description.title.markdown}
      '14': {name: punctuation.definition.string.begin.markdown}
      '15': {name: punctuation.definition.string.end.markdown}
      '16': {name: punctuation.definition.metadata.markdown}

  link-ref:
    name: meta.link.reference.markdown
    match: (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)([^\]]*+)(\])
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.title.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: punctuation.definition.constant.begin.markdown}
      '6': {name: constant.other.reference.link.markdown}
      '7': {name: punctuation.definition.constant.end.markdown}

  link-ref-literal:
    name: meta.link.reference.literal.markdown
    match: (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(\])
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.title.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: punctuation.definition.constant.begin.markdown}
      '6': {name: punctuation.definition.constant.end.markdown}

  list-paragraph:
    patterns:
    - name: meta.paragraph.list.markdown
      begin: \G\s+(?=\S)
      end: ^\s*$
      patterns:
      - include: '#inline'
      - include: text.html.basic
      - include: '#fenced-code-blocks'

  quote_inline:
    name: markup.raw.inline.content.markdown
    begin: \"
    end: \"
    patterns:
    - include: '#inline'

  raw:
    name: markup.raw.inline.markdown
    match: (`+)((?:[^`]|(?!(?<!`)\1(?!`))`)*+)(\1)
    captures:
      '1': {name: punctuation.definition.raw.markdown}
      '2': {name: markup.raw.inline.content.markdown}
      '3': {name: punctuation.definition.raw.markdown}

  separator:
    name: meta.separator.markdown
    match: \G[ ]{,3}([-*_])([ ]{,2}\1){2,}[ \t]*$\n?

  strikethrough:
    name: markup.strikethrough.markdown
    begin: "(?x)\n(?<!\\w)(~~)(?=[^\\s~])\t\t\t\t\t\t\t\t# Open\n(?=\n\t(\n\t    <[^>]*+>\t\
      \t\t\t\t\t\t# HTML tags\n\t  | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\\
      k<raw>\n\t\t\t\t\t\t\t\t\t\t\t# Raw\n\t  | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+\t\
      \t\t# Escapes\n\t  | \\[\n\t\t(\n\t\t        (?<square>\t\t\t\t\t# Named group\n\
      \t\t\t\t\t[^\\[\\]\\\\]\t\t\t\t# Match most chars\n\t\t          | \\\\.\t\t\
      \t\t\t\t# Escaped chars\n\t\t          | \\[ \\g<square>*+ \\]\t\t# Nested brackets\n\
      \t\t        )*+\n\t\t\t\\]\n\t\t\t(\n\t\t\t\t(\t\t\t\t\t\t\t# Reference Link\n\
      \t\t\t\t\t[ ]?\t\t\t\t\t# Optional space\n\t\t\t\t\t\\[[^\\]]*+\\]\t\t\t\t#\
      \ Ref name\n\t\t\t\t)\n\t\t\t  | (\t\t\t\t\t\t\t# Inline Link\n\t\t\t\t\t\\\
      (\t\t\t\t\t\t# Opening paren\n\t\t\t\t\t\t[ \\t]*+\t\t\t\t# Optional whtiespace\n\
      \t\t\t\t\t\t<?(.*?)>?\t\t\t# URL\n\t\t\t\t\t\t[ \\t]*+\t\t\t\t# Optional whtiespace\n\
      \t\t\t\t\t\t(\t\t\t\t\t# Optional Title\n\t\t\t\t\t\t\t(?<title>['\"])\n\t\t\
      \t\t\t\t\t(.*?)\n\t\t\t\t\t\t\t\\k<title>\n\t\t\t\t\t\t)?\n\t\t\t\t\t\\)\n\t\
      \t\t\t)\n\t\t\t)\n\t\t)\n\t  | (?!(?<=\\S)\\1).\t\t\t\t\t\t# Everything besides\n\
      \t\t\t\t\t\t\t\t\t\t\t# style closer\n\t)++\n)"
    end: (?<=\S)(\1)
    captures:
      '1': {name: punctuation.definition.strikethrough.markdown}
    patterns:
    - begin: (?=<[^>]*?>)
      end: (?<=>)
      patterns:
      - include: '#tag-kbd'
      - include: text.html.basic
      applyEndPatternLast: 1
    - include: '#escape'
    - include: '#ampersand'
    - include: '#bracket'
    - include: '#raw'
    - include: '#bold'
    - include: '#italic'
    - include: '#image-inline'
    - include: '#link-inline'
    - include: '#link-inet'
    - include: '#link-email'
    - include: '#image-ref'
    - include: '#link-ref-literal'
    - include: '#link-ref'

  tag-kbd:
    name: markup.kbd.markdown
    match: ((<)(kbd)(>))([^<]+)((</)(kbd)(>))
    captures:
      '1': {name: meta.tag.other.html}
      '2': {name: punctuation.definition.tag.begin.html}
      '3': {name: entity.name.tag.other.html}
      '4': {name: punctuation.definition.tag.end.html}
      '5': {name: markup.kbd.content.markdown}
      '6': {name: meta.tag.other.html}
      '7': {name: punctuation.definition.tag.begin.html}
      '8': {name: entity.name.tag.other.html}
      '9': {name: punctuation.definition.tag.end.html}
firstLineMatch: ^Format:\s*(?i:complete)\s*$
foldingStartMarker: |-
  (?x)
  (<(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|form|dl)\b.*?>
  |<!--(?!.*-->)
  |\{\s*($|\?>\s*$|//|/\*(.*\*/\s*$|(?!.*?\*/)))
  )
foldingStopMarker: |-
  (?x)
  (</(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|form|dl)>
  |^\s*-->
  |(^|\s)\}
  )
keyEquivalent: ^~M
